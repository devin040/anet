config:
  target: 'http://localhost:8080'
  phases:
    - duration: 600
      arrivalRate: 60
  processor: "./processor.js"
  defaults:
    headers:
      x-my-service-auth: '987401838271002188298567'
  variables:
    advisor:
      - "erin"
      - "arthur"
      - "rebecca"
      - "jack"
      - "henry"
    superuser:
      - "arthur"
      - "rebecca"
      - "henry"
    admin:
      - "arthur"
    advisorAttendee:
      - "ANDERSON, Andrew"
      - "BECCABON, Rebecca"
      - "ELIZAWELL, Elizabeth"
      - "ERINSON, Erin"
      - "JACKSON, Jack"
      - "REINTON, Reina"
    principalAttendee:
      - "ROGWELL, Roger"
      - "STEVESON, Steve"
      - "TOPFERNESS, Christopf"
scenarios:
  - name: Check home
    weight: 5
    flow:
    - get:
        url: "/"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
  - name: Make report
    weight: 3
    flow:
    - post:
        url: "/graphql"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json:
          query: "query  { people: personList (f:search, query:{text:\"{{ advisorAttendee }}\" }) {list { uuid, name }}}"
        capture:
        - json: "$.data.people.list[0].uuid"
          as: "advisorAttendeeUuid"
        - json: "$.data.people.list[0].name"
          as: "advisorAttendeeName"
    - post:
        url: "/graphql"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json:
          query: "query  { people: personList (f:search, query:{text:\"{{ principalAttendee }}\" }) {list { uuid, name }}}"
        capture:
        - json: "$.data.people.list[0].uuid"
          as: "principalAttendeeUuid"
        - json: "$.data.people.list[0].name"
          as: "principalAttendeeName"
    - post:
        url: "/api/reports/new"
        beforeRequest: "generateRandomData"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json:
          intent: "{{ intent }}"
          engagementDate: "{{ engagementDate }}"
          atmosphere: "{{ atmosphere }}"
          atmosphereDetails: "{{ atmosphereDetails }}"
          attendees:
          - name: "{{ advisorAttendeeName }}"
            status: ACTIVE
            role: ADVISOR
            uuid: "{{ advisorAttendeeUuid }}"
            primary: true
          - name: "{{ principalAttendeeName }}"
            role: PRINCIPAL
            uuid: "{{ principalAttendeeUuid }}"
            primary: true
          tasks: []
          comments: []
          reportText: "{{ reportText }}"
          nextSteps: "{{ nextSteps }}"
          keyOutcomes: "{{ keyOutcomes }}"
          tags: []
          reportSensitiveInformation:
            text: "{{ reportSensitiveInformationText }}"
          authorizationGroups: []
        capture:
          json: "$.uuid"
          as: "reportUuid"
    - log: "{{ advisor }} creating report {{ reportUuid }}"
  - name: Approve report
    weight: 5
    flow:
    - post:
        url: "/graphql"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json: 
          query: "query { person(f:me) { uuid }}"
        capture:
          json: "$.data.person.uuid"
          as: "personUuid"
    - post:
        url: "/graphql"
        afterResponse: "continueIfResult"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json: 
          query: "query  { reports: reportList (f:search, query:{pendingApprovalOf:\"{{ personUuid }}\" }) {list { uuid}}}"
        capture:
          json: "$.data.reports.list[0].uuid"
          as: "result"
    - log: "{{ advisor }} approving report {{ result }}"
    - post:
        url: "/api/reports/{{ result }}/approve"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
  - name: Update report
    weight: 50
    flow:
    - post:
        url: "/graphql"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json: 
          query: "query { person(f:me) { uuid }}"
        capture:
          json: "$.data.person.uuid"
          as: "personUuid"
    - post:
        url: "/graphql"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json:
          query: "query  { people: personList (f:search, query:{text:\"{{ advisorAttendee }}\" }) {list { uuid }}}"
        capture:
        - json: "$.data.people.list[0].uuid"
          as: "advisorAttendeeUuid"
        - json: "$.data.people.list[0].name"
          as: "advisorAttendeeName"
    - post:
        url: "/graphql"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json:
          query: "query  { people: personList (f:search, query:{text:\"{{ principalAttendee }}\" }) {list { uuid }}}"
        capture:
        - json: "$.data.people.list[0].uuid"
          as: "principalAttendeeUuid"
        - json: "$.data.people.list[0].name"
          as: "principalAttendeeName"
    - post:
        url: "/graphql"
        afterResponse: "continueIfResult"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json: 
          query: "query  { reports: reportList (f:search, query:{authorUuid:\"{{ personUuid }}\",state:[DRAFT,REJECTED]}) {list { uuid, reportSensitiveInformation { uuid } }}}"
        capture:
        - json: "$.data.reports.list[0].uuid"
          as: "result"
        - json: "$.data.reports.list[0].reportSensitiveInformation.uuid"
          as: "rsiUuid"
    - log: "{{ advisor }} updating report {{ result }}"
    - post:
        url: "/api/reports/update"
        beforeRequest: "generateRandomData"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json:
          uuid: "{{ result }}"
          intent: "{{ intent }}"
          engagementDate: "{{ engagementDate }}"
          atmosphere: "{{ atmosphere }}"
          atmosphereDetails: "{{ atmosphereDetails }}"
          attendees:
          - name: "{{ advisorAttendeeName }}"
            status: ACTIVE
            role: ADVISOR
            uuid: "{{ advisorAttendeeUuid }}"
            primary: true
          - name: "{{ principalAttendeeName }}"
            status: ACTIVE
            role: PRINCIPAL
            uuid: "{{ principalAttendeeUuid }}"
            primary: true
          tasks: []
          comments: []
          reportText: "{{ reportText }}"
          nextSteps: "{{ nextSteps }}"
          keyOutcomes: "{{ keyOutcomes }}"
          tags: []
          reportSensitiveInformation:
            uuid: "{{ rsiUuid }}"
            text: "{{ reportSensitiveInformationText }}"
            reportUuid: "{{ result }}"
          authorizationGroups: []
  - name: Submit report
    weight: 1
    flow:
    - post:
        url: "/graphql"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json: 
          query: "query { person(f:me) { uuid }}"
        capture:
          json: "$.data.person.uuid"
          as: "personUuid"
    - post:
        url: "/graphql"
        afterResponse: "continueIfResult"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
        json: 
          query: "query  { reports: reportList (f:search, query:{authorUuid:\"{{ personUuid }}\",state:[DRAFT,REJECTED]}) {list { uuid}}}"
        capture:
          json: "$.data.reports.list[0].uuid"
          as: "result"
    - log: "{{ advisor }} submitting report {{ result }}"
    - post:
        url: "/api/reports/{{ result }}/submit"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
  - name: Rollups
    weight: 1  
    flow:
    - log: "{{ advisor }} checking rollups"
    - get:
        url: "/rollup"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
    - think: 1
    - get:
        url: "/rollup?date=-1"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
  - name: Insights
    weight: 1
    flow:
    - log: "{{ advisor }} checking insights"
    - get:
        url: "/insights/not-approved-reports"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
    - get:
        url: "/insights/cancelled-reports"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
    - get:
        url: "/insights/reports-by-task"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
    - get:
        url: "/insights/future-engagements-by-location"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
    - get:
        url: "/insights/reports-by-day-of-week"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
    - get:
        url: "/insights/advisor-reports"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
  - name: Do searches
    weight: 3
    flow:
    - log: "{{ advisor }} searching"
    - get:
        url: "/search?text=a"
        auth:
          user: "{{advisor}}"
          pass: "{{advisor}}"
